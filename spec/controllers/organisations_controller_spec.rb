require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe OrganisationsController do

  # This should return the minimal set of attributes required to create a valid
  # Organisation. As you add validations to Organisation, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :name => "Sasken",
      :address1 => "Bangalore",
      :address2 => "Domlur",
      :city => "Bangalore Central",
      :state => "Karnataka",
      :country => "India",
      :zip => "234556",
      :domain => "www.sasken.com"
    }
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OrganisationsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  def mock_organisation(stubs={})
    @mock_organisation ||= mock_unique_organisation(stubs)
  end

  def mock_unique_organisation(stubs={})
    mock_model(Organisation).as_null_object.tap do |organisation|
      organisation.stub(stubs) unless stubs.empty?
    end
  end
  
  before(:each) do
    @organisation = Organisation.new valid_attributes
  end


  describe "GET index" do
    it "assigns all organisations as @organisations" do      
      get :index, {}, valid_session      
    end
  end

  describe "GET show" do
    it "assigns the requested organisation as @organisation" do      
      get :show, {:id => @organisation.to_param}, valid_session      
    end
  end

  describe "GET new" do
    it "assigns a new organisation as @organisation" do
      get :new, {}, valid_session      
    end
  end

  describe "GET edit" do
    it "assigns the requested organisation as @organisation" do      
      get :edit, {:id => @organisation.to_param}, valid_session      
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Organisation" do
        expect {
          post :create, {:organisation => valid_attributes}, valid_session
        }.to change(Organisation, :count).by(0)
      end

      it "assigns a newly created organisation as @organisation" do
        post :create, {:organisation => valid_attributes}, valid_session        
      end

      it "redirects to the created organisation" do
        post :create, {:organisation => valid_attributes}, valid_session        
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved organisation as @organisation" do
        # Trigger the behavior that occurs when invalid params are submitted
        Organisation.any_instance.stub(:save).and_return(false)
        post :create, {:organisation => {}}, valid_session        
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Organisation.any_instance.stub(:save).and_return(false)
        post :create, {:organisation => {}}, valid_session        
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do

      it "assigns the requested organisation as @organisation" do        
        put :update, {:id => @organisation.to_param, :organisation => valid_attributes}, valid_session        
      end

      it "redirects to the organisation" do        
        put :update, {:id => @organisation.to_param, :organisation => valid_attributes}, valid_session        
      end
    end

    describe "with invalid params" do
      it "assigns the organisation as @organisation" do
        #organisation = Organisation.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Organisation.any_instance.stub(:save).and_return(false)
        put :update, {:id => @organisation.to_param, :organisation => {}}, valid_session        
      end

      it "re-renders the 'edit' template" do
        #organisation = Organisation.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Organisation.any_instance.stub(:save).and_return(false)
        put :update, {:id => @organisation.to_param, :organisation => {}}, valid_session        
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested organisation" do      
      expect {
        delete :destroy, {:id => @organisation.to_param}, valid_session
      }.to change(Organisation, :count).by(0)
    end

    it "redirects to the organisations list" do      
      delete :destroy, {:id => @organisation.to_param}, valid_session      
    end
  end


  describe "GET index" do
    it "assigns @organisations" do
      Organisation.stub(:paginate) { [mock_organisation] }
      get :index      
    end    
  end
  
  it "bulk action enable for oragnisation" do
  
  end

  it "bulk action disable for organisation" do

  end

  it "bulk action delete for organisation" do

  end

end
