require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do  
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.    
  
  before(:each) do 
    @user = User.create(:username => "anupks2014", :clear_password => "abc123@#", :clear_password_confirmation => "abc123@#")
    @mock_users = [mock_model(User)] 
    User.stub(:paginate).and_return(@mock_users) 
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  def valid_session
    {}
  end
   
  def mock_user(stubs={})
    @mock_user ||= mock_unique_user(stubs)
  end

  def mock_unique_user(stubs={})
    mock_model(User).as_null_object.tap do |user|
      user.stub(stubs) unless stubs.empty?
    end
  end
  
  describe "GET index" do
    it "succeeds" do      
      get :index           
    end         

  end

  describe "GET show" do
    it "assigns the requested user as @user" do      
      get :show, {:id => @user.id}#, valid_session      
    end
  end

  describe "GET new" do
    it "assigns a new user as @user" do
      get :new, {}, valid_session      
    end
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do      
      get :edit, {:id => @user.id}#, valid_session      
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {:user => @user}#, valid_session
        }.to change(User, :count).by(0)
      end

      it "assigns a newly created user as @user" do
        post :create, {:user => @user}#, valid_session        
      end

      it "redirects to the created user" do
        post :create, {:user => @user}#, valid_session        
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => {}}#, valid_session        
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => {}}#, valid_session        
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do      

      it "assigns the requested user as @user" do        
        put :update, {:id => @user.id, :user => @user}#, valid_session        
      end

      it "redirects to the user" do        
        put :update, {:id => @user.id, :user => @user}#, valid_session        
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do        
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => @user.id, :user => {}}, valid_session        
      end

      it "re-renders the 'edit' template" do        
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => @user.id, :user => {}}, valid_session        
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user" do      
      expect {
        delete :destroy, {:id => @user.id}#, valid_session
      }.to change(User, :count).by(0)
    end

    it "redirects to the users list" do     
      delete :destroy, {:id => @user.id}#, valid_session      
    end
  end
  
  describe "GET index" do
    it "assigns @users" do
      User.stub(:paginate) { [mock_user] }
      get :index
      response.should_not be_success      
    end
    
    it "bulk action enable for users" do
  
    end
    
  end

end
